<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\correlation_de1_yao\triple_anttena_20190923\de0_dual_antenna\GPS_C_code_xdwahaha\RTX_ARM_FVP_RTX_ex2\RTX_ARM_FVP_RTX_ex2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\correlation_de1_yao\triple_anttena_20190923\de0_dual_antenna\GPS_C_code_xdwahaha\RTX_ARM_FVP_RTX_ex2\RTX_ARM_FVP_RTX_ex2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Tue Oct 01 12:26:49 2019
<BR><P>
<H3>Maximum Stack Usage =       2616 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
measure_thread &rArr; CALCULATE_DOP &rArr; __hardfp_pow &rArr; sqrt
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[23]">__Vectors</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">DAbt_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[8]">FIQ_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[7]">IRQ_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[f]">OS_Tick_Handler</a> from HAL_CA9.o(.emb_text) referenced from system_VE_A9_MP.o(.text)
 <LI><a href="#[5]">PAbt_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from HAL_CA9.o(.emb_text) referenced from system_VE_A9_MP.o(.text)
 <LI><a href="#[2]">Reset_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from HAL_CA9.o(.emb_text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[c]">SystemInit</a> from system_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(.text)
 <LI><a href="#[3]">Undef_Handler</a> from startup_VE_A9_MP.o(.text) referenced from startup_VE_A9_MP.o(RESET)
 <LI><a href="#[11]">__SVC_1</a> from system_VE_A9_MP.o(.text) referenced from SVC_Table.o(SVC_TABLE)
 <LI><a href="#[23]">__Vectors</a> from startup_VE_A9_MP.o(RESET) referenced from startup_VE_A9_MP.o(.text)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_VE_A9_MP.o(.text)
 <LI><a href="#[13]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[12]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1d]">allocate_thread</a> from allocate.o(.text) referenced from RTX_ex2.o(.constdata)
 <LI><a href="#[1e]">display_thread</a> from display.o(.text) referenced from RTX_ex2.o(.constdata)
 <LI><a href="#[21]">ekf_position_thread</a> from ekf_position.o(.text) referenced from RTX_ex2.o(.constdata)
 <LI><a href="#[1]">main</a> from system_VE_A9_MP.o(.text) referenced 2 times from RTX_Conf_CM.o(.data)
 <LI><a href="#[20]">measure_thread</a> from measure.o(.text) referenced from RTX_ex2.o(.constdata)
 <LI><a href="#[1f]">message_thread</a> from message.o(.text) referenced from RTX_ex2.o(.constdata)
 <LI><a href="#[1c]">osThreadExit</a> from rt_CMSIS.o(i.osThreadExit) referenced from rt_CMSIS.o(i.svcThreadCreate)
 <LI><a href="#[1b]">os_idle_demon</a> from RTX_Conf_CM.o(.text) referenced from rt_Task.o(i.rt_sys_init)
 <LI><a href="#[9]">rt_alloc_box</a> from rt_MemBox.o(i.rt_alloc_box) referenced from HAL_CA9.o(.emb_text)
 <LI><a href="#[a]">rt_free_box</a> from rt_MemBox.o(i.rt_free_box) referenced from HAL_CA9.o(.emb_text)
 <LI><a href="#[14]">svcKernelInitialize</a> from rt_CMSIS.o(i.svcKernelInitialize) referenced from rt_CMSIS.o(i.osKernelInitialize)
 <LI><a href="#[15]">svcKernelStart</a> from rt_CMSIS.o(i.svcKernelStart) referenced from rt_CMSIS.o(i.osKernelStart)
 <LI><a href="#[16]">svcSignalSet</a> from rt_CMSIS.o(i.svcSignalSet) referenced from rt_CMSIS.o(i.osSignalSet)
 <LI><a href="#[17]">svcSignalWait</a> from rt_CMSIS.o(i.svcSignalWait) referenced from rt_CMSIS.o(i.osSignalWait)
 <LI><a href="#[18]">svcThreadCreate</a> from rt_CMSIS.o(i.svcThreadCreate) referenced from rt_CMSIS.o(i.osThreadCreate)
 <LI><a href="#[19]">svcThreadGetId</a> from rt_CMSIS.o(i.svcThreadGetId) referenced from rt_CMSIS.o(i.osThreadExit)
 <LI><a href="#[1a]">svcThreadTerminate</a> from rt_CMSIS.o(i.svcThreadTerminate) referenced from rt_CMSIS.o(i.osThreadExit)
 <LI><a href="#[10]">tracking</a> from tracking.o(.text) referenced from system_VE_A9_MP.o(.text)
 <LI><a href="#[22]">uart_thread</a> from uart_ARRC.o(.text) referenced from RTX_ex2.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__Vectors</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup_VE_A9_MP.o(RESET))

<P><STRONG><a name="[24]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[121]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[25]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[d4]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
</UL>

<P><STRONG><a name="[122]"></a>__rt_final_cpp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[123]"></a>__rt_final_exit</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[124]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[125]"></a>_main_cpp_init</STRONG> (ARM, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[27]"></a>_main_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _main_init &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate (via BLX)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize (via BLX)
</UL>

<P><STRONG><a name="[126]"></a>__asm___17_system_VE_A9_MP_c___SVC_1____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.emb_text), UNUSED)

<P><STRONG><a name="[127]"></a>__asm___17_system_VE_A9_MP_c___SVC_1____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.emb_text), UNUSED)

<P><STRONG><a name="[a2]"></a>__asm___17_system_VE_A9_MP_c___SVC_1____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v7_inv_dcache_all (via BLX)
</UL>

<P><STRONG><a name="[a1]"></a>FPUEnable</STRONG> (ARM, 116 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>

<P><STRONG><a name="[11b]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart (via BLX)
</UL>

<P><STRONG><a name="[f3]"></a>__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart (via BLX)
</UL>

<P><STRONG><a name="[128]"></a>__asm___10_rt_CMSIS_c_8216d75d____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, rt_CMSIS.o(.emb_text), UNUSED)

<P><STRONG><a name="[129]"></a>__asm___9_HAL_CA9_c_bcbb3217____set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[12a]"></a>__asm___9_HAL_CA9_c_bcbb3217____set_CPS_USR</STRONG> (ARM, 8 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[12b]"></a>__asm___9_HAL_CA9_c_bcbb3217____v7_all_cache</STRONG> (ARM, 172 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[12c]"></a>rt_set_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[116]"></a>rt_get_PSP</STRONG> (ARM, 28 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete (via BLX)
</UL>

<P><STRONG><a name="[12d]"></a>_alloc_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[12e]"></a>_free_box</STRONG> (ARM, 24 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (ARM, 632 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler &rArr; rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock (via BLX)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (ARM, 76 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_VE_A9_MP.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>OS_Tick_Handler</STRONG> (ARM, 80 bytes, Stack size 0 bytes, HAL_CA9.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OS_Tick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack (via BLX)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock (via BLX)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_VE_A9_MP.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (ARM, 144 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Reset_Handler &rArr; create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page &rArr; __memory_section
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>Undef_Handler</STRONG> (ARM, 116 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Undef_Handler &rArr; CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUndefHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PAbt_Handler</STRONG> (ARM, 56 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PAbt_Handler &rArr; CPAbtHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DAbt_Handler</STRONG> (ARM, 60 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAbt_Handler &rArr; CDAbtHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDAbtHandler (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>IRQ_Handler</STRONG> (ARM, 152 bytes, Stack size 0 bytes, startup_VE_A9_MP.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CALCULATE_DOP</STRONG> (Thumb, 3104 bytes, Stack size 2264 bytes, DOP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = CALCULATE_DOP &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[1b]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_Task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[111]"></a>os_tick_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[12f]"></a>os_tick_val</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>os_tick_ovf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>os_tick_irqack</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[107]"></a>os_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, RTX_Conf_CM.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
</UL>

<P><STRONG><a name="[3f]"></a>serialInterface</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, RTX_ex2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serialInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3e]"></a>$Super$$main</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, RTX_ex2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = $Super$$main &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_allocation
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_EnableIRQ
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialInterface
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>channel_locked</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, allocate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_in_seconds
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clock_state
</UL>

<P><STRONG><a name="[48]"></a>cold_allocate_channel</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, allocate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cold_allocate_channel &rArr; initialize_channel &rArr; clear_messages
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_thread
</UL>

<P><STRONG><a name="[40]"></a>initialize_allocation</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, allocate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = initialize_allocation &rArr; initialize_channel &rArr; clear_messages
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d]"></a>allocate_thread</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, allocate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = allocate_thread &rArr; osSignalWait &rArr; __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_in_seconds
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clock_state
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_allocate_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>altera_avalon_uart_lwhal_putchar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, altera_avalon_uart_lwhal_putchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = altera_avalon_uart_lwhal_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altera_avalon_uart_lwhal_putstring
</UL>

<P><STRONG><a name="[52]"></a>log_ephemeris</STRONG> (Thumb, 722 bytes, Stack size 296 bytes, display.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[1e]"></a>display_thread</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = display_thread &rArr; display_ekfparameter &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ekfparameter
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_where
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_messages
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_debug
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tracking
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ephemeris
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pseudorange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>ekf_position_thread</STRONG> (Thumb, 640 bytes, Stack size 600 bytes, ekf_position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = ekf_position_thread &rArr; model &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>clear_ephemeris</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ephemeris.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe1
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_channel
</UL>

<P><STRONG><a name="[5e]"></a>process_subframe1</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, ephemeris.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_subframe1
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_with_weeks
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ephemeris
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[82]"></a>process_subframe2</STRONG> (Thumb, 622 bytes, Stack size 16 bytes, ephemeris.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_subframe2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[83]"></a>process_subframe3</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, ephemeris.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = process_subframe3
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[84]"></a>process_subframe4</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ephemeris.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[85]"></a>process_subframe5</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ephemeris.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[69]"></a>GIC_EnableDistributor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[63]"></a>GIC_DisableDistributor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[61]"></a>GIC_DistributorInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetICDICFR
</UL>

<P><STRONG><a name="[131]"></a>GIC_DistributorImplementer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>GIC_SetTarget</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIC_SetTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[60]"></a>GIC_SetICDICFR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistributorInfo
</UL>

<P><STRONG><a name="[132]"></a>GIC_GetTarget</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>GIC_EnableInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
</UL>

<P><STRONG><a name="[6b]"></a>GIC_DisableInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
</UL>

<P><STRONG><a name="[133]"></a>GIC_AcknowledgePending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>GIC_EndInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>GIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[66]"></a>GIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[135]"></a>GIC_SetPendingIRQ</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>GIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>GIC_SetLevelModel</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GIC_SetLevelModel
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[64]"></a>GIC_SetPriority</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[65]"></a>GIC_GetPriority</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIC_GetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>

<P><STRONG><a name="[6e]"></a>GIC_InterfacePriorityMask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
</UL>

<P><STRONG><a name="[6d]"></a>GIC_SetBinaryPoint</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
</UL>

<P><STRONG><a name="[137]"></a>GIC_GetBinaryPoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>GIC_GetIRQStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>GIC_SendSGI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gic.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>GIC_DistInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GIC_DistInit &rArr; GIC_SetLevelModel
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_GetPriority
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetPriority
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetLevelModel
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DisableIRQ
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetTarget
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistributorInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DisableDistributor
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_EnableDistributor
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>

<P><STRONG><a name="[6a]"></a>GIC_CPUInterfaceInit</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GIC_CPUInterfaceInit &rArr; GIC_SetLevelModel
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetBinaryPoint
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_InterfacePriorityMask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_GetPriority
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetPriority
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_SetLevelModel
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DisableIRQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DisableInterface
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_EnableInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>

<P><STRONG><a name="[6f]"></a>GIC_Enable</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIC_Enable &rArr; GIC_DistInit &rArr; GIC_SetLevelModel
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_CPUInterfaceInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_DistInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[80]"></a>gpio1_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[86]"></a>gpio1_clr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[70]"></a>grab_bit_times</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, measure.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[20]"></a>measure_thread</STRONG> (Thumb, 1442 bytes, Stack size 152 bytes, measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616<LI>Call Chain = measure_thread &rArr; CALCULATE_DOP &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_clock_correction
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellite_azel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_time_with_tic
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pseudoranges
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pseudorange
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_position
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grab_bit_times
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clock_state
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>clear_messages</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_messages
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_preamble
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_channel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
</UL>

<P><STRONG><a name="[1f]"></a>message_thread</STRONG> (Thumb, 734 bytes, Stack size 16 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = message_thread &rArr; osSignalWait &rArr; __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_preamble
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_word
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_bit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio1_clr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio1_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe5
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe4
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe3
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe2
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>create_translation_table</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = create_translation_table &rArr; __get_page_descriptor &rArr; __memory_page &rArr; __memory_section
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TTSection
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler (via BLX)
</UL>

<P><STRONG><a name="[97]"></a>clear_position</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, position.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pseudoranges
</UL>

<P><STRONG><a name="[79]"></a>ecef_to_llh</STRONG> (Thumb, 374 bytes, Stack size 168 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ecef_to_llh &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[75]"></a>calculate_position</STRONG> (Thumb, 2484 bytes, Stack size 1680 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = calculate_position &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[76]"></a>calculate_velocity</STRONG> (Thumb, 2956 bytes, Stack size 2216 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = calculate_velocity &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[77]"></a>calculate_velocity_test</STRONG> (Thumb, 2966 bytes, Stack size 2216 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = calculate_velocity_test &rArr; __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[74]"></a>satellite_azel</STRONG> (Thumb, 282 bytes, Stack size 120 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = satellite_azel &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[73]"></a>SatPosEphemeris</STRONG> (Thumb, 2350 bytes, Stack size 416 bytes, position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SatPosEphemeris &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[13a]"></a>SatVelEphemeris</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, position.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>clear_pseudoranges</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pseudorange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_pseudoranges
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_position
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[72]"></a>calculate_pseudorange</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, pseudorange.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calculate_pseudorange &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[99]"></a>SER_PutChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>

<P><STRONG><a name="[4b]"></a>SER_PutString</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ephemeris
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ekfparameter
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_where
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_messages
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tracking
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ephemeris
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pseudorange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_screen
</UL>

<P><STRONG><a name="[57]"></a>SER_GetChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[13b]"></a>interrupt_SER</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>__SVC_1</STRONG> (ARM, 32 bytes, Stack size 8 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __SVC_1 &rArr; __v7_inv_dcache_all
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v7_inv_dcache_all (via BLX)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v7_inv_icache_all (via BLX)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v7_inv_btac (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ca9u_inv_tlb_all (via BLX)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_btac (via BLX)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__enable_caches (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SVC_Table.o(SVC_TABLE)
</UL>
<P><STRONG><a name="[a0]"></a>InterruptHandlerRegister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>InterruptHandlerUnregister</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; GIC_Enable &rArr; GIC_DistInit &rArr; GIC_SetLevelModel
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIC_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_VE_A9_MP.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main &rArr; $Super$$main &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptHandlerRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_Conf_CM.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>CDAbtHandler</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CDAbtHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[33]"></a>CPAbtHandler</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CPAbtHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler (via BLX)
</UL>

<P><STRONG><a name="[32]"></a>CUndefHandler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CUndefHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler (via BLX)
</UL>

<P><STRONG><a name="[71]"></a>increment_time_with_tic</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[7f]"></a>set_time_with_tow</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_preamble
</UL>

<P><STRONG><a name="[78]"></a>set_clock_correction</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[4d]"></a>get_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
</UL>

<P><STRONG><a name="[44]"></a>get_time_in_seconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_locked
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_thread
</UL>

<P><STRONG><a name="[5f]"></a>set_time_with_weeks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_subframe1
</UL>

<P><STRONG><a name="[13d]"></a>set_to_fix_clock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>get_clock_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_locked
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_thread
</UL>

<P><STRONG><a name="[4e]"></a>get_standard_time</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = get_standard_time &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_where
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[5c]"></a>ekf_init</STRONG> (Thumb, 34 bytes, Stack size 96 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ekf_init &rArr; unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_position_thread
</UL>

<P><STRONG><a name="[5d]"></a>ekf_step</STRONG> (Thumb, 348 bytes, Stack size 480 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = ekf_step &rArr; mulvec
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_addeye
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulvec
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mulmat
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUPInvert
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUPtr2Matrix
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUMatrixHelper
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUPDecompose
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_position_thread
</UL>

<P><STRONG><a name="[be]"></a>signExtension</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tracking.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[bf]"></a>d_log_data</STRONG> (Thumb, 638 bytes, Stack size 0 bytes, tracking.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[10]"></a>tracking</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tracking &rArr; lock &rArr; fix_atan2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_log_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signExtension
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_in
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_VE_A9_MP.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>uart_thread</STRONG> (Thumb, 322 bytes, Stack size 184 bytes, uart_ARRC.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = uart_thread &rArr; get_standard_time &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_standard_time
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altera_avalon_uart_lwhal_putstring
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> RTX_ex2.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>print_buffer</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, uart_putstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_buffer &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[c2]"></a>altera_avalon_uart_lwhal_putstring</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart_putstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = altera_avalon_uart_lwhal_putstring &rArr; altera_avalon_uart_lwhal_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altera_avalon_uart_lwhal_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pseudorange
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_standard_time
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_in
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_atan2
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_position
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_standard_time
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_where
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_messages
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tracking
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ephemeris
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pseudorange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[145]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[146]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e8]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[148]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via BLX)
</UL>

<P><STRONG><a name="[149]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[cd]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[4f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ephemeris
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ekfparameter
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_where
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_messages
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tracking
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_ephemeris
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_pseudorange
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_position
</UL>

<P><STRONG><a name="[14e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[14f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d7]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[150]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[151]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[152]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[c3]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_buffer
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[96]"></a>__hardfp_asin</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_asin &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellite_azel
</UL>

<P><STRONG><a name="[94]"></a>__hardfp_atan</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[95]"></a>__hardfp_atan2</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellite_azel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
</UL>

<P><STRONG><a name="[38]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[3b]"></a>__hardfp_pow</STRONG> (Thumb, 2104 bytes, Stack size 176 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[36]"></a>__hardfp_sin</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[37]"></a>__hardfp_sqrt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellite_azel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecef_to_llh
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_velocity
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_position
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SatPosEphemeris
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choldc1
</UL>

<P><STRONG><a name="[e3]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 636 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[e5]"></a>__kernel_cos</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[de]"></a>__kernel_poly</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e4]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[e6]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[e1]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[e7]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[dd]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[153]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[154]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[155]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[da]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[10e]"></a>_init_box</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rt_MemBox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[e2]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[df]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[3d]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[f0]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_Event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[ef]"></a>isr_mbx_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rt_Mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[39]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALCULATE_DOP
</UL>

<P><STRONG><a name="[28]"></a>osKernelInitialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[2a]"></a>osKernelStart</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_CMSIS.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_CPS_USR (via BLX)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
</UL>

<P><STRONG><a name="[c0]"></a>osSignalSet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rt_CMSIS.o(i.osSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osSignalSet &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[49]"></a>osSignalWait</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, rt_CMSIS.o(i.osSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osSignalWait &rArr; __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_thread
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_thread
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_position_thread
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_thread
</UL>

<P><STRONG><a name="[29]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_CMSIS.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init (via BLX)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_CMSIS.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[9]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA9.o(.emb_text)
</UL>
<P><STRONG><a name="[11d]"></a>rt_alloc_mem</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rt_Memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[f5]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_Task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>

<P><STRONG><a name="[f9]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_Robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[fb]"></a>rt_dec_dly</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rt_List.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[fc]"></a>rt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_Task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[fe]"></a>rt_evt_psh</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_Event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[101]"></a>rt_evt_set</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_Event.o(i.rt_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_set &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[102]"></a>rt_evt_wait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_Event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[a]"></a>rt_free_box</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_MemBox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> HAL_CA9.o(.emb_text)
</UL>
<P><STRONG><a name="[11e]"></a>rt_free_mem</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_Memory.o(i.rt_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[f7]"></a>rt_get_first</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_List.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[118]"></a>rt_init_mem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_Memory.o(i.rt_init_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[10f]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_Robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[104]"></a>rt_init_stack</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[ee]"></a>rt_mbx_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[11c]"></a>rt_mbx_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_Mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[105]"></a>rt_mbx_psh</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, rt_Mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2e]"></a>rt_pop_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rt_System.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
</UL>

<P><STRONG><a name="[f2]"></a>rt_psh_req</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_System.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[f1]"></a>rt_psq_enq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_List.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[f6]"></a>rt_put_dly</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_List.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[fa]"></a>rt_put_prio</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_List.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[fd]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_List.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[10a]"></a>rt_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_List.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[106]"></a>rt_ret_val</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, HAL_CA.o(i.rt_ret_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[100]"></a>rt_ret_val2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, HAL_CA.o(i.rt_ret_val2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[ff]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_dly))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>

<P><STRONG><a name="[10b]"></a>rt_rmv_list</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_List.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[109]"></a>rt_sem_psh</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_Semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_psh &rArr; rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[2d]"></a>rt_stk_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_System.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[f8]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_Task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[10d]"></a>rt_sys_init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, rt_Task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[110]"></a>rt_sys_start</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rt_Task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[30]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_System.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
</UL>

<P><STRONG><a name="[113]"></a>rt_tsk_create</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, rt_Task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[115]"></a>rt_tsk_delete</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, rt_Task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP (via BLX)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[2b]"></a>rt_tsk_lock</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_lock))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler (via BLX)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler (via BLX)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[117]"></a>rt_tsk_prio</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_Task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[11f]"></a>rt_tsk_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_Task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[2c]"></a>rt_tsk_unlock</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, rt_System.o(i.rt_tsk_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler (via BLX)
</UL>

<P><STRONG><a name="[e0]"></a>sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[14]"></a>svcKernelInitialize</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[15]"></a>svcKernelStart</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_rt_CMSIS_c_8216d75d____set_PSP (via BLX)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[119]"></a>svcMessageCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_CMSIS.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[16]"></a>svcSignalSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcSignalSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osSignalSet)
</UL>
<P><STRONG><a name="[17]"></a>svcSignalWait</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, rt_CMSIS.o(i.svcSignalWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osSignalWait)
</UL>
<P><STRONG><a name="[18]"></a>svcThreadCreate</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[19]"></a>svcThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_CMSIS.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[1a]"></a>svcThreadTerminate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rt_CMSIS.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_CMSIS.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[112]"></a>sysTimerTick</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_CMSIS.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[45]"></a>initialize_channel</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, allocate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initialize_channel &rArr; clear_messages
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_messages
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ephemeris
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cold_allocate_channel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize_allocation
</UL>

<P><STRONG><a name="[4a]"></a>clear_screen</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clear_screen &rArr; SER_PutString
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[4c]"></a>display_position</STRONG> (Thumb, 848 bytes, Stack size 296 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = display_position &rArr; get_standard_time &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_standard_time
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clock_state
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[50]"></a>display_pseudorange</STRONG> (Thumb, 902 bytes, Stack size 184 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = display_pseudorange &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[51]"></a>display_ephemeris</STRONG> (Thumb, 1500 bytes, Stack size 672 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = display_ephemeris &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[53]"></a>display_tracking</STRONG> (Thumb, 436 bytes, Stack size 208 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = display_tracking &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[58]"></a>display_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, display.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[54]"></a>display_messages</STRONG> (Thumb, 398 bytes, Stack size 240 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = display_messages &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[55]"></a>display_where</STRONG> (Thumb, 190 bytes, Stack size 1136 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244<LI>Call Chain = display_where &rArr; get_standard_time &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_standard_time
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[56]"></a>display_ekfparameter</STRONG> (Thumb, 476 bytes, Stack size 1288 bytes, display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = display_ekfparameter &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_thread
</UL>

<P><STRONG><a name="[5a]"></a>blkfill</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, ekf_position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blkfill
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[59]"></a>init</STRONG> (Thumb, 260 bytes, Stack size 120 bytes, ekf_position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init &rArr; blkfill
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blkfill
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_position_thread
</UL>

<P><STRONG><a name="[5b]"></a>model</STRONG> (Thumb, 1382 bytes, Stack size 1016 bytes, ekf_position.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = model &rArr; __hardfp_pow &rArr; sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_position_thread
</UL>

<P><STRONG><a name="[7c]"></a>parity</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, message.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParityCheck
</UL>

<P><STRONG><a name="[7b]"></a>ParityCheck</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_for_preamble
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_word
</UL>

<P><STRONG><a name="[81]"></a>store_bit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = store_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[7d]"></a>store_word</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = store_word &rArr; ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParityCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[7e]"></a>look_for_preamble</STRONG> (Thumb, 734 bytes, Stack size 32 bytes, message.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = look_for_preamble &rArr; ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time_with_tow
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParityCheck
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_messages
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;message_thread
</UL>

<P><STRONG><a name="[8a]"></a>__ap_section</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ap_section
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
</UL>

<P><STRONG><a name="[8c]"></a>__xn_page</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __xn_page
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[8f]"></a>__ap_page</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ap_page
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[88]"></a>__memory_section</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __memory_section
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_section_descriptor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_page
</UL>

<P><STRONG><a name="[87]"></a>__memory_page</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __memory_page &rArr; __memory_section
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_section
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[89]"></a>__get_section_descriptor</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __get_section_descriptor &rArr; __ap_section
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_section
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ap_section
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[8b]"></a>__get_page_descriptor</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __get_page_descriptor &rArr; __memory_page &rArr; __memory_section
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__secure_page
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__global_page
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__shared_page
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__p_page
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__domain_page
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memory_page
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ap_page
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__xn_page
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[93]"></a>__TTSection</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __TTSection
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_translation_table
</UL>

<P><STRONG><a name="[8d]"></a>__domain_page</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[8e]"></a>__p_page</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[90]"></a>__shared_page</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[91]"></a>__global_page</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[92]"></a>__secure_page</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mmu_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_page_descriptor
</UL>

<P><STRONG><a name="[9e]"></a>__enable_caches</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[9f]"></a>__enable_btac</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[9a]"></a>__ca9u_inv_tlb_all</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[9d]"></a>__v7_inv_btac</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[9b]"></a>__v7_inv_icache_all</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[9c]"></a>__v7_inv_dcache_all</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_VE_A9_MP.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __v7_inv_dcache_all
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_system_VE_A9_MP_c___SVC_1____v7_all_cache (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SVC_1 (via BLX)
</UL>

<P><STRONG><a name="[ac]"></a>LUPDecompose</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LUPDecompose
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[ab]"></a>LUMatrixHelper</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LUMatrixHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[ae]"></a>LUPtr2Matrix</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LUPtr2Matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[ad]"></a>LUPInvert</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LUPInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[a4]"></a>choldc1</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tiny_ekf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choldcsl
</UL>

<P><STRONG><a name="[a5]"></a>choldcsl</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, tiny_ekf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choldc1
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cholsl
</UL>

<P><STRONG><a name="[a6]"></a>cholsl</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, tiny_ekf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;choldcsl
</UL>

<P><STRONG><a name="[a8]"></a>mulmat</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mulmat
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[b0]"></a>mulvec</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mulvec
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[a9]"></a>transpose</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transpose
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[aa]"></a>accum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = accum
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[b1]"></a>add</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[af]"></a>sub</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sub
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[b2]"></a>negate</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = negate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[b3]"></a>mat_addeye</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tiny_ekf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
</UL>

<P><STRONG><a name="[a7]"></a>unpack</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, tiny_ekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_step
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ekf_init
</UL>

<P><STRONG><a name="[bb]"></a>lmag</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lmag
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_in
</UL>

<P><STRONG><a name="[b9]"></a>sgn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tracking.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_bit_coherency
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_bit_coherency_init
</UL>

<P><STRONG><a name="[b6]"></a>smag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tracking.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;confirm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire
</UL>

<P><STRONG><a name="[b4]"></a>fix_atan2</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fix_atan2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_in
</UL>

<P><STRONG><a name="[b5]"></a>acquire</STRONG> (Thumb, 1064 bytes, Stack size 8 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smag
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[b7]"></a>confirm</STRONG> (Thumb, 1204 bytes, Stack size 8 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = confirm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smag
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[b8]"></a>data_bit_coherency_init</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_bit_coherency_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_in
</UL>

<P><STRONG><a name="[ba]"></a>pull_in</STRONG> (Thumb, 4240 bytes, Stack size 24 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pull_in &rArr; fix_atan2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_bit_coherency_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_atan2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[bc]"></a>data_bit_coherency</STRONG> (Thumb, 4056 bytes, Stack size 24 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_bit_coherency
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock
</UL>

<P><STRONG><a name="[bd]"></a>lock</STRONG> (Thumb, 7452 bytes, Stack size 32 bytes, tracking.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lock &rArr; fix_atan2 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_messages
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_bit_coherency
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_atan2
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lmag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking
</UL>

<P><STRONG><a name="[d8]"></a>__exceptional_mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rt_CMSIS.o(i.__exceptional_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __exceptional_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[d9]"></a>__get_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_CMSIS.o(i.__get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__exceptional_mode
</UL>

<P><STRONG><a name="[ed]"></a>isrMessagePut</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_CMSIS.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[108]"></a>rt_ms2tick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_CMSIS.o(i.rt_ms2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_ms2tick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[f4]"></a>rt_tid2ptcb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_CMSIS.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[120]"></a>rt_timer_insert</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_CMSIS.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[11a]"></a>sysThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_CMSIS.o(i.sysThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[10c]"></a>rt_ret_regs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, HAL_CA.o(i.rt_ret_regs))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[114]"></a>rt_get_TID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_Task.o(i.rt_get_TID))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[103]"></a>rt_init_context</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rt_Task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[e9]"></a>_fp_digits</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d6]"></a>_printf_core</STRONG> (Thumb, 1734 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[ec]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[eb]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[12]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
